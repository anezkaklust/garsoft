#NuTools Services
#include "seedservice.fcl"

#GArSoft Services
#include "DetectorClocks.fcl"
#include "DetectorProperties.fcl"
#include "GArProperties.fcl"
#include "ECALProperties.fcl"
#include "Geometry.fcl"
#include "RunHistory.fcl"
#include "BackTracker.fcl"

#Plugins
#include "EventInit.fcl"
#include "CompressedHitFinder.fcl"
#include "TPCHitCluster.fcl"
#include "tpcvechitfinder2.fcl"
#include "tpcpatrec2.fcl"
#include "tpctrackfit2.fcl"
#include "tpccathodestitch.fcl"
#include "vertexfinder1.fcl"
#include "veefinder1.fcl"
#include "SiPMHitFinder.fcl"
#include "CaloClustering.fcl"
#include "CaloStripSplitter.fcl"
#include "TPCECALAssociation.fcl"

process_name: RecoProc

services:
{
# Load the service that manages root files for histograms.
TFileService:           { fileName: "reco_hist.root" }
TimeTracker:            {}
RandomNumberGenerator:  {} #ART native random number generator
 #See Geometry.fcl for the list of geometries available
GeometryGAr:            @local::toad_geo
GeometryGArConfigurationWriter: {}
ExptGeoHelperInterface: @local::standard_geometry_helper
DetectorClocks:         @local::standard_clocks
DetectorProperties:     @local::standard_detproperties
GArProperties:          @local::standard_garproperties
#ECALProperties:         @local::standard_ecalproperties
NuRandomService:        @local::standard_NuRandomService
MagneticField:          @local::standard_mag_garsoft
BackTracker:            @local::standard_backtracker
#RunHistory:             @local::standard_runhistory
}


#Start each new event with an empty event.
source:
{
module_type: RootInput
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

producers:
{
init:               @local::standard_EventInit
hit:                @local::standard_CompressedHitFinder
tpcclusterpass1:    @local::standard_TPCHitCluster
vechit:             @local::standard_tpcvechitfinder2
patrec:             @local::standard_tpcpatrec2
trackpass1:         @local::standard_tpctrackfit2
vertexpass1:        @local::standard_vertexfinder1
tpccluster:         @local::standard_tpccathodestitch  # use unusual name to keep backward compatibility as this module produces tpc clusters
track:              @local::standard_tpctrackfit2
vertex:             @local::standard_vertexfinder1
veefinder1:         @local::standard_veefinder1
sipmhit:            @local::standard_SiPMHitFinder
sipmhitmuid:        @local::standard_SiPMHitFinder_MuID
sscalohit:          @local::standard_CaloStripSplitter
sscalohitmuid:      @local::standard_CaloStripSplitter_MuID
calocluster:        @local::standard_CaloClustering
caloclustermuid:    @local::standard_CaloClustering_MuID
trkecalassn:        @local::standard_TPCECALAssociation
}
analyzers:
{
}

#Define the producer and filter modules for this path, order matters.  Put init 1st!
#Filters reject all following items.  ee lines starting physics.producers below
reco: [init,hit,tpcclusterpass1,vechit,patrec,trackpass1,vertexpass1,tpccluster,track,vertex,veefinder1,sipmhit,sipmhitmuid,sscalohit,sscalohitmuid,calocluster,caloclustermuid,trkecalassn]

#define the output stream, there could be more than one if using filters
stream1:  [ out1 ]

#trigger_paths is a keyword and contains the paths that modify the ::art::event,
#ie filters and producers
trigger_paths: [ reco ]
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
out1:
{
module_type: RootOutput
fileName:    "reco.root" #default file name, can override from command line with -o or --output
}
}

physics.producers.track.PatRecLabel: "tpccluster"  # from the stitch step, input to second-pass fit
physics.producers.vertex.TrackLabel: "track"
physics.producers.sipmhit.UseTimePositionReco: false
physics.producers.sipmhitmuid.UseTimePositionReco: false