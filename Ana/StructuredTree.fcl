BEGIN_PROLOG

standard_structuredtree:
{
 module_type:               StructuredTree

 #=== input product labels ===
 GEANTLabel:               "geant"
 GEANTInstanceCalo:        "ECAL"
 GEANTInstanceMuID:        "MuID"

 RawCaloHitLabel:          "daqsipm"
 RawCaloHitInstanceCalo:   "ECAL"
 RawCaloHitInstanceMuID:   "MuID"

 HitLabel:                 "hit"

 CaloHitLabel:             "sipmhit"
 CaloHitInstanceCalo:      ""
 MuIDHitLabel:             "sipmhit"
 CaloHitInstanceMuID:      "MuID"

 TPCClusterLabel:          "tpccluster"
 TrackLabel:               "track"
 VertexLabel:              "vertex"
 ClusterLabel:             "calocluster"
 ECALAssnLabel:            "trkecalassn"
 VeeLabel:                 "veefinder1"

#Two configurations: one for general analysis, one for reco r&d
 AnalysisMode: "gen"  # gen or reco
 WriteDisplay: false  # write info for standalone event display

# = What to save? ==============================================
# = MC info is: (a) MCTruth, GTruth, MCParticle if WriteMCinfo; (b) MCPtrajectory if
# = (WriteMCPTrajectory && WriteMCinfo); and (c) MC info in calorimeter if
# = (WriteMCCaloInfo && WriteMCinfo).
# = Write momenta associated with MC trajectories only if the trajectory is also written
 WriteMCinfo:               true
 WriteMCPTrajectory:        false
 WriteMCPTrajMomenta:       false
 WriteMCCaloInfo:           true
# The origin of an MCParticle might be a short distance from the MCTrue interaction
# vertex - maybe it is a pi0, tau or charm produced in the interaction and decayed
# by GEANT.  Count the MCParticle as from the vertex if it is less than this distance:
 MatchMCPtoVertDist:        0.001

# Tracking info is: (a) raw hits if WriteHits; (b) TPCClusters and the tracks that
# they are associated to if WriteTPCClusters; (c) the track info if WriteTracks (d)
# found vertices and their associations to track ends if (WriteVertices && WriteTracks).
 WriteHits:                 false
 WriteTPCClusters:          true
 WriteTracks:               true
 WriteVertices:             true
 WriteVees:                 true

# Calorimetry info is: (a) calorimeter digits if WriteCaloDigits; (b) hits if
# WriteCaloHits; (c) clusters if WriteCaloClusters (d) associations to tracks if
# (WriteMatchedTracks && WriteCaloClusters && WriteTracks).
 WriteCaloDigits:           false
 WriteCaloHits:             true
 WriteCaloClusters:         true
 WriteMatchedTracks:        true

# dE/dx algorithms are still here in the analysis code; hence the IonizeTruncate
# parameter.  Coherent pion analysis has some code here as well.  WriteCohInfo
# also needs WriteMCinfo.
 IonizTruncate:             1.00
 WriteCohInfo:              false
}

END_PROLOG
