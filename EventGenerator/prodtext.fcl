#NuTools Services
#include "magfield.fcl"
#include "seedservice.fcl"

#GArSoft Services
#include "DetectorClocks.fcl"
#include "DetectorProperties.fcl"
#include "GArProperties.fcl"
#include "Geometry.fcl"
#include "RunHistory.fcl"

#Plugins
#include "TextFileGen.fcl"
#include "GArG4.fcl"

process_name: TextGen

services:
{
 # Load the service that manages root files for histograms.
 TFileService:           { fileName: "single_hist.root" }
 TimeTracker:            {}
 RandomNumberGenerator:  {} #ART native random number generator
 #See Geometry.fcl for the list of geometries available
 GeometryGAr:            @local::toad_geo
 GeometryGArConfigurationWriter: {}
 ExptGeoHelperInterface: @local::standard_geometry_helper
 DetectorClocks:         @local::standard_clocks
 DetectorProperties:     @local::standard_detproperties
 GArProperties:          @local::standard_garproperties
 #ECALProperties:         @local::standard_ecalproperties
 NuRandomService:        @local::standard_NuRandomService
 MagneticField:          @local::standard_mag_garsoft 
 #RunHistory:             @local::standard_runhistory
}


#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:   1          # Number of events to create n.b. this should correspond to the number of events
                          # in the used text file, else either too few events will be produced or an exception will be
						  # thrown(?)  can also use the '-n' flag
  firstRun:    1           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   generator: @local::standard_textfilegen	  
   geant:     @local::standard_geant
   rns:       { module_type: "RandomNumberSaver" }
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 simulate: [ generator, geant, rns ]
 
 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the ::art::event, 
 #ie filters and producers
 trigger_paths: [simulate] 

}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "text_gen.root" #default file name, can override from command line with -o or --output
 }
}

